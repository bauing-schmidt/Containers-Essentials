Extension { #name : #QuoRemComplementary }

{ #category : #'*Containers-Essentials-Visualizations' }
QuoRemComplementary >> asShapeDots [

	| shapes |
	shapes := (1 to: self numberOfDots) collect: [ :each | 
		          RSCircle new
			          withBorder;
			          color: Color white;
			          yourself ].

	rem ifNegative: [ 
		(1 to: rem negated) do: [ :i | 
			(shapes at: shapes size + (1 - i)) sameColorAsBorderColor ] ].

	RSGridLayout on: shapes withLineItemsCount: b.

	^ RSComposite new
		  model: self;
		  shapes: shapes;
		  yourself
]

{ #category : #'*Containers-Essentials-Visualizations' }
QuoRemComplementary >> instVarsNamesOrderedCollection [

	^ { 
		  #a asSlotDescriptor.
		  #b asSlotDescriptor.
		  #quo asSlotDescriptor.
		  #rem asSlotDescriptor.
		  "(#value asSlotDescriptor
			   blockClosure: [ self value asShapeSlotsDfsTree ];
			   inline: true;
			   quote)."
		  (#asString asSlotDescriptor inline: true).
		  (#asShapeDots asSlotDescriptor
			   inline: true;
			   quote) }
]

{ #category : #'*Containers-Essentials-Visualizations' }
QuoRemComplementary >> numberOfDots [

	^ b * quo
]

{ #category : #'*Containers-Essentials-Visualizations' }
QuoRemComplementary >> printOn: aStream [

	aStream
		nextPutAll: a asString;
		nextPutAll: ' = ';
		nextPutAll: quo asString;
		nextPutAll: 'Â·';
		nextPutAll: b asString.

	rem
		ifNegative: [ 
			aStream
				nextPutAll: ' - ';
				nextPutAll: rem negated asString ]
		ifZero: [  ]
		ifPositive: [ 
			aStream
				nextPutAll: ' + ';
				nextPutAll: rem asString ]
]
